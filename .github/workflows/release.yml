name: Release Go Binary
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - created

jobs:
  build-macos:
    name: Build, Sign and Notarize macOS Binary
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          check-latest: true

      - name: Install dependencies
        run: go mod download

      - name: Import code signing certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
      - name: Build the binary
        run: make build && ./scripts/sign.sh
        env:
          VERSION: ${{ github.event_name == 'release' && github.ref_name || format('dev-{0}', github.sha) }}
          SIGNING_CERTIFICATE_NAME: ${{ secrets.SIGNING_CERTIFICATE_NAME }}

      - name: Import code installer certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.INSTALLER_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
          keychain: installer

      - name: Notarize the binary
        run: ./scripts/package-notarize.sh
        if: github.event_name == 'release'
        env:
          INSTALLER_SIGNING_CERTIFICATE_NAME: ${{ secrets.INSTALLER_SIGNING_CERTIFICATE_NAME }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Prepare assets for release
        if: github.event_name == 'release'
        run: |
          mkdir -p assets
          cp resume-mcp_macOS_arm64.pkg assets/resume-mcp_macOS_arm64.pkg

      # Upload to release if this is a release event
      - name: Upload binaries to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            assets/resume-mcp_macOS_arm64.pkg
          token: ${{ secrets.GITHUB_TOKEN }}
  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/resume-mcp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-

      - name: Set build time
        id: build_time
        run: echo "BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        if: github.event_name == 'release'
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name}}
            COMMIT_HASH=${{ github.sha }}
            BUILD_TIME=${{ steps.build_time.outputs.BUILD_TIME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  k8s-deploy:
    name: Deploy to Kubernetes
    needs: docker-release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K8S_CONFIG_FILE_B64 }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify kubectl connection
        run: kubectl cluster-info

      - name: Update deployment image
        run: |
          # Extract version from release tag
          VERSION="${{ github.ref_name }}"

          # Update kustomization with new image tag
          cd k8s
          kubectl kustomize . | kubectl apply -f -

          # Update the deployment with the specific release tag
          kubectl set image deployment/resume-mcp resume-mcp=ghcr.io/rxtech-lab/resume-mcp:${VERSION} -n resume

          # Wait for rollout to complete
          kubectl rollout status deployment/launchpad-mcp -n launchpad --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -n launchpad -l app=launchpad-mcp
          kubectl get service -n launchpad launchpad-mcp-service
